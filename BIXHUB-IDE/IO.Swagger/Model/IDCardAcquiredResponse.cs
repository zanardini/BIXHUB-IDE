/* 
 * OnBoarding
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// IDCardAcquiredResponse
    /// </summary>
    [DataContract]
        public partial class IDCardAcquiredResponse :  IEquatable<IDCardAcquiredResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IDCardAcquiredResponse" /> class.
        /// </summary>
        /// <param name="documentIdentifier">documentIdentifier.</param>
        /// <param name="expiryDate">expiryDate.</param>
        /// <param name="documentType">documentType.</param>
        /// <param name="mimeType">mimeType.</param>
        /// <param name="frontFileData">frontFileData.</param>
        /// <param name="rearFileData">rearFileData.</param>
        public IDCardAcquiredResponse(string documentIdentifier = default(string), DateTime? expiryDate = default(DateTime?), DocumentType documentType = default(DocumentType), string mimeType = default(string), byte[] frontFileData = default(byte[]), byte[] rearFileData = default(byte[]))
        {
            this.DocumentIdentifier = documentIdentifier;
            this.ExpiryDate = expiryDate;
            this.DocumentType = documentType;
            this.MimeType = mimeType;
            this.FrontFileData = frontFileData;
            this.RearFileData = rearFileData;
        }
        
        /// <summary>
        /// Gets or Sets DocumentIdentifier
        /// </summary>
        [DataMember(Name="documentIdentifier", EmitDefaultValue=false)]
        public string DocumentIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        [DataMember(Name="expiryDate", EmitDefaultValue=false)]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name="documentType", EmitDefaultValue=false)]
        public DocumentType DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        [DataMember(Name="mimeType", EmitDefaultValue=false)]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or Sets FrontFileData
        /// </summary>
        [DataMember(Name="frontFileData", EmitDefaultValue=false)]
        public byte[] FrontFileData { get; set; }

        /// <summary>
        /// Gets or Sets RearFileData
        /// </summary>
        [DataMember(Name="rearFileData", EmitDefaultValue=false)]
        public byte[] RearFileData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IDCardAcquiredResponse {\n");
            sb.Append("  DocumentIdentifier: ").Append(DocumentIdentifier).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  FrontFileData: ").Append(FrontFileData).Append("\n");
            sb.Append("  RearFileData: ").Append(RearFileData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IDCardAcquiredResponse);
        }

        /// <summary>
        /// Returns true if IDCardAcquiredResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of IDCardAcquiredResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IDCardAcquiredResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentIdentifier == input.DocumentIdentifier ||
                    (this.DocumentIdentifier != null &&
                    this.DocumentIdentifier.Equals(input.DocumentIdentifier))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.FrontFileData == input.FrontFileData ||
                    (this.FrontFileData != null &&
                    this.FrontFileData.Equals(input.FrontFileData))
                ) && 
                (
                    this.RearFileData == input.RearFileData ||
                    (this.RearFileData != null &&
                    this.RearFileData.Equals(input.RearFileData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentIdentifier != null)
                    hashCode = hashCode * 59 + this.DocumentIdentifier.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.FrontFileData != null)
                    hashCode = hashCode * 59 + this.FrontFileData.GetHashCode();
                if (this.RearFileData != null)
                    hashCode = hashCode * 59 + this.RearFileData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

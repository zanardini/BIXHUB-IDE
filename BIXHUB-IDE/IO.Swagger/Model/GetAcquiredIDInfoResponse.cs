/* 
 * OnBoarding
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// GetAcquiredIDInfoResponse
    /// </summary>
    [DataContract]
        public partial class GetAcquiredIDInfoResponse :  IEquatable<GetAcquiredIDInfoResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAcquiredIDInfoResponse" /> class.
        /// </summary>
        /// <param name="personalData">personalData.</param>
        /// <param name="idCard">idCard.</param>
        /// <param name="selfie">selfie.</param>
        /// <param name="livenessDetection">livenessDetection.</param>
        /// <param name="digitalIdentity">digitalIdentity.</param>
        public GetAcquiredIDInfoResponse(PersonalDataAcquiredInfoResponse personalData = default(PersonalDataAcquiredInfoResponse), IDCardAcquiredResponse idCard = default(IDCardAcquiredResponse), ResourceResponse selfie = default(ResourceResponse), ResourceResponse livenessDetection = default(ResourceResponse), DigitalIdentityResponse digitalIdentity = default(DigitalIdentityResponse))
        {
            this.PersonalData = personalData;
            this.IdCard = idCard;
            this.Selfie = selfie;
            this.LivenessDetection = livenessDetection;
            this.DigitalIdentity = digitalIdentity;
        }
        
        /// <summary>
        /// Gets or Sets PersonalData
        /// </summary>
        [DataMember(Name="personalData", EmitDefaultValue=false)]
        public PersonalDataAcquiredInfoResponse PersonalData { get; set; }

        /// <summary>
        /// Gets or Sets IdCard
        /// </summary>
        [DataMember(Name="idCard", EmitDefaultValue=false)]
        public IDCardAcquiredResponse IdCard { get; set; }

        /// <summary>
        /// Gets or Sets Selfie
        /// </summary>
        [DataMember(Name="selfie", EmitDefaultValue=false)]
        public ResourceResponse Selfie { get; set; }

        /// <summary>
        /// Gets or Sets LivenessDetection
        /// </summary>
        [DataMember(Name="livenessDetection", EmitDefaultValue=false)]
        public ResourceResponse LivenessDetection { get; set; }

        /// <summary>
        /// Gets or Sets DigitalIdentity
        /// </summary>
        [DataMember(Name="digitalIdentity", EmitDefaultValue=false)]
        public DigitalIdentityResponse DigitalIdentity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAcquiredIDInfoResponse {\n");
            sb.Append("  PersonalData: ").Append(PersonalData).Append("\n");
            sb.Append("  IdCard: ").Append(IdCard).Append("\n");
            sb.Append("  Selfie: ").Append(Selfie).Append("\n");
            sb.Append("  LivenessDetection: ").Append(LivenessDetection).Append("\n");
            sb.Append("  DigitalIdentity: ").Append(DigitalIdentity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAcquiredIDInfoResponse);
        }

        /// <summary>
        /// Returns true if GetAcquiredIDInfoResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAcquiredIDInfoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAcquiredIDInfoResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PersonalData == input.PersonalData ||
                    (this.PersonalData != null &&
                    this.PersonalData.Equals(input.PersonalData))
                ) && 
                (
                    this.IdCard == input.IdCard ||
                    (this.IdCard != null &&
                    this.IdCard.Equals(input.IdCard))
                ) && 
                (
                    this.Selfie == input.Selfie ||
                    (this.Selfie != null &&
                    this.Selfie.Equals(input.Selfie))
                ) && 
                (
                    this.LivenessDetection == input.LivenessDetection ||
                    (this.LivenessDetection != null &&
                    this.LivenessDetection.Equals(input.LivenessDetection))
                ) && 
                (
                    this.DigitalIdentity == input.DigitalIdentity ||
                    (this.DigitalIdentity != null &&
                    this.DigitalIdentity.Equals(input.DigitalIdentity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PersonalData != null)
                    hashCode = hashCode * 59 + this.PersonalData.GetHashCode();
                if (this.IdCard != null)
                    hashCode = hashCode * 59 + this.IdCard.GetHashCode();
                if (this.Selfie != null)
                    hashCode = hashCode * 59 + this.Selfie.GetHashCode();
                if (this.LivenessDetection != null)
                    hashCode = hashCode * 59 + this.LivenessDetection.GetHashCode();
                if (this.DigitalIdentity != null)
                    hashCode = hashCode * 59 + this.DigitalIdentity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

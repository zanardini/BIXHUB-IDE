/* 
 * OnBoarding
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISessionLifeCycleApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create the identification session
        /// </summary>
        /// <remarks>
        /// Permits to create the identification session for a prospect user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateSessionResponse</returns>
        CreateSessionResponse ApiV1SessionLifeCycleCreatePost (CreateSessionRequest body = null);

        /// <summary>
        /// Create the identification session
        /// </summary>
        /// <remarks>
        /// Permits to create the identification session for a prospect user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateSessionResponse</returns>
        ApiResponse<CreateSessionResponse> ApiV1SessionLifeCycleCreatePostWithHttpInfo (CreateSessionRequest body = null);
        /// <summary>
        /// Delete an identification session
        /// </summary>
        /// <remarks>
        /// Delete an identification session if exist
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns></returns>
        void ApiV1SessionLifeCycleDeleteSessionGuidDelete (Guid? sessionGuid);

        /// <summary>
        /// Delete an identification session
        /// </summary>
        /// <remarks>
        /// Delete an identification session if exist
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SessionLifeCycleDeleteSessionGuidDeleteWithHttpInfo (Guid? sessionGuid);
        /// <summary>
        /// Returns acquired informations of a prospect customer during the identification session
        /// </summary>
        /// <remarks>
        /// Returns acquired informations of a prospect customer during the identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>GetAcquiredIDInfoResponse</returns>
        GetAcquiredIDInfoResponse ApiV1SessionLifeCycleGetAcquiredIDInfoSessionGuidPost (Guid? sessionGuid, GetAcquiredIDInfoRequest body = null);

        /// <summary>
        /// Returns acquired informations of a prospect customer during the identification session
        /// </summary>
        /// <remarks>
        /// Returns acquired informations of a prospect customer during the identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetAcquiredIDInfoResponse</returns>
        ApiResponse<GetAcquiredIDInfoResponse> ApiV1SessionLifeCycleGetAcquiredIDInfoSessionGuidPostWithHttpInfo (Guid? sessionGuid, GetAcquiredIDInfoRequest body = null);
        /// <summary>
        /// Returns a list of identification sessions
        /// </summary>
        /// <remarks>
        /// Returns a list of identification sessions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GetAllSessionResponse</returns>
        GetAllSessionResponse ApiV1SessionLifeCycleGetAllPost (GetAllSessionRequest body = null);

        /// <summary>
        /// Returns a list of identification sessions
        /// </summary>
        /// <remarks>
        /// Returns a list of identification sessions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetAllSessionResponse</returns>
        ApiResponse<GetAllSessionResponse> ApiV1SessionLifeCycleGetAllPostWithHttpInfo (GetAllSessionRequest body = null);
        /// <summary>
        /// Returns Audit Logs of an identification session
        /// </summary>
        /// <remarks>
        /// Returns Audit Logs in pdf format
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>GetAllSessionResponse</returns>
        GetAllSessionResponse ApiV1SessionLifeCycleGetAuditLogSessionGuidGet (Guid? sessionGuid);

        /// <summary>
        /// Returns Audit Logs of an identification session
        /// </summary>
        /// <remarks>
        /// Returns Audit Logs in pdf format
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>ApiResponse of GetAllSessionResponse</returns>
        ApiResponse<GetAllSessionResponse> ApiV1SessionLifeCycleGetAuditLogSessionGuidGetWithHttpInfo (Guid? sessionGuid);
        /// <summary>
        /// Returns info of an identification sessione
        /// </summary>
        /// <remarks>
        /// Returns the identification session&#x27;s metadata/parameters/attributes risk score associated if the flow is completed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>GetSessionResponse</returns>
        GetSessionResponse ApiV1SessionLifeCycleGetSessionGuidGet (Guid? sessionGuid);

        /// <summary>
        /// Returns info of an identification sessione
        /// </summary>
        /// <remarks>
        /// Returns the identification session&#x27;s metadata/parameters/attributes risk score associated if the flow is completed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>ApiResponse of GetSessionResponse</returns>
        ApiResponse<GetSessionResponse> ApiV1SessionLifeCycleGetSessionGuidGetWithHttpInfo (Guid? sessionGuid);
        /// <summary>
        /// Returns status of a list of identification session
        /// </summary>
        /// <remarks>
        /// Returns status and risk score of a identification session base on the flow types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;GetStatusSessionResponse&gt;</returns>
        List<GetStatusSessionResponse> ApiV1SessionLifeCycleGetStatusPost (List<Guid?> body = null);

        /// <summary>
        /// Returns status of a list of identification session
        /// </summary>
        /// <remarks>
        /// Returns status and risk score of a identification session base on the flow types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;GetStatusSessionResponse&gt;</returns>
        ApiResponse<List<GetStatusSessionResponse>> ApiV1SessionLifeCycleGetStatusPostWithHttpInfo (List<Guid?> body = null);
        /// <summary>
        /// Send an email with the link to activate the identification session
        /// </summary>
        /// <remarks>
        /// Send an email with the link to activate the identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="templateId"> (optional)</param>
        /// <returns></returns>
        void ApiV1SessionLifeCycleSendEmailSessionGuidPost (Guid? sessionGuid, string templateId = null);

        /// <summary>
        /// Send an email with the link to activate the identification session
        /// </summary>
        /// <remarks>
        /// Send an email with the link to activate the identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="templateId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SessionLifeCycleSendEmailSessionGuidPostWithHttpInfo (Guid? sessionGuid, string templateId = null);
        /// <summary>
        /// Update attributes, parameters or metadata of an identification session
        /// </summary>
        /// <remarks>
        /// Update parameters or metadata of an identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ApiV1SessionLifeCycleUpdateSessionGuidPut (Guid? sessionGuid, UpdateSessionRequest body = null);

        /// <summary>
        /// Update attributes, parameters or metadata of an identification session
        /// </summary>
        /// <remarks>
        /// Update parameters or metadata of an identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1SessionLifeCycleUpdateSessionGuidPutWithHttpInfo (Guid? sessionGuid, UpdateSessionRequest body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create the identification session
        /// </summary>
        /// <remarks>
        /// Permits to create the identification session for a prospect user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CreateSessionResponse</returns>
        System.Threading.Tasks.Task<CreateSessionResponse> ApiV1SessionLifeCycleCreatePostAsync (CreateSessionRequest body = null);

        /// <summary>
        /// Create the identification session
        /// </summary>
        /// <remarks>
        /// Permits to create the identification session for a prospect user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateSessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSessionResponse>> ApiV1SessionLifeCycleCreatePostAsyncWithHttpInfo (CreateSessionRequest body = null);
        /// <summary>
        /// Delete an identification session
        /// </summary>
        /// <remarks>
        /// Delete an identification session if exist
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SessionLifeCycleDeleteSessionGuidDeleteAsync (Guid? sessionGuid);

        /// <summary>
        /// Delete an identification session
        /// </summary>
        /// <remarks>
        /// Delete an identification session if exist
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleDeleteSessionGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid);
        /// <summary>
        /// Returns acquired informations of a prospect customer during the identification session
        /// </summary>
        /// <remarks>
        /// Returns acquired informations of a prospect customer during the identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GetAcquiredIDInfoResponse</returns>
        System.Threading.Tasks.Task<GetAcquiredIDInfoResponse> ApiV1SessionLifeCycleGetAcquiredIDInfoSessionGuidPostAsync (Guid? sessionGuid, GetAcquiredIDInfoRequest body = null);

        /// <summary>
        /// Returns acquired informations of a prospect customer during the identification session
        /// </summary>
        /// <remarks>
        /// Returns acquired informations of a prospect customer during the identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GetAcquiredIDInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAcquiredIDInfoResponse>> ApiV1SessionLifeCycleGetAcquiredIDInfoSessionGuidPostAsyncWithHttpInfo (Guid? sessionGuid, GetAcquiredIDInfoRequest body = null);
        /// <summary>
        /// Returns a list of identification sessions
        /// </summary>
        /// <remarks>
        /// Returns a list of identification sessions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GetAllSessionResponse</returns>
        System.Threading.Tasks.Task<GetAllSessionResponse> ApiV1SessionLifeCycleGetAllPostAsync (GetAllSessionRequest body = null);

        /// <summary>
        /// Returns a list of identification sessions
        /// </summary>
        /// <remarks>
        /// Returns a list of identification sessions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GetAllSessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllSessionResponse>> ApiV1SessionLifeCycleGetAllPostAsyncWithHttpInfo (GetAllSessionRequest body = null);
        /// <summary>
        /// Returns Audit Logs of an identification session
        /// </summary>
        /// <remarks>
        /// Returns Audit Logs in pdf format
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of GetAllSessionResponse</returns>
        System.Threading.Tasks.Task<GetAllSessionResponse> ApiV1SessionLifeCycleGetAuditLogSessionGuidGetAsync (Guid? sessionGuid);

        /// <summary>
        /// Returns Audit Logs of an identification session
        /// </summary>
        /// <remarks>
        /// Returns Audit Logs in pdf format
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of ApiResponse (GetAllSessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllSessionResponse>> ApiV1SessionLifeCycleGetAuditLogSessionGuidGetAsyncWithHttpInfo (Guid? sessionGuid);
        /// <summary>
        /// Returns info of an identification sessione
        /// </summary>
        /// <remarks>
        /// Returns the identification session&#x27;s metadata/parameters/attributes risk score associated if the flow is completed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of GetSessionResponse</returns>
        System.Threading.Tasks.Task<GetSessionResponse> ApiV1SessionLifeCycleGetSessionGuidGetAsync (Guid? sessionGuid);

        /// <summary>
        /// Returns info of an identification sessione
        /// </summary>
        /// <remarks>
        /// Returns the identification session&#x27;s metadata/parameters/attributes risk score associated if the flow is completed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of ApiResponse (GetSessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSessionResponse>> ApiV1SessionLifeCycleGetSessionGuidGetAsyncWithHttpInfo (Guid? sessionGuid);
        /// <summary>
        /// Returns status of a list of identification session
        /// </summary>
        /// <remarks>
        /// Returns status and risk score of a identification session base on the flow types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;GetStatusSessionResponse&gt;</returns>
        System.Threading.Tasks.Task<List<GetStatusSessionResponse>> ApiV1SessionLifeCycleGetStatusPostAsync (List<Guid?> body = null);

        /// <summary>
        /// Returns status of a list of identification session
        /// </summary>
        /// <remarks>
        /// Returns status and risk score of a identification session base on the flow types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetStatusSessionResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetStatusSessionResponse>>> ApiV1SessionLifeCycleGetStatusPostAsyncWithHttpInfo (List<Guid?> body = null);
        /// <summary>
        /// Send an email with the link to activate the identification session
        /// </summary>
        /// <remarks>
        /// Send an email with the link to activate the identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="templateId"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SessionLifeCycleSendEmailSessionGuidPostAsync (Guid? sessionGuid, string templateId = null);

        /// <summary>
        /// Send an email with the link to activate the identification session
        /// </summary>
        /// <remarks>
        /// Send an email with the link to activate the identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="templateId"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleSendEmailSessionGuidPostAsyncWithHttpInfo (Guid? sessionGuid, string templateId = null);
        /// <summary>
        /// Update attributes, parameters or metadata of an identification session
        /// </summary>
        /// <remarks>
        /// Update parameters or metadata of an identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1SessionLifeCycleUpdateSessionGuidPutAsync (Guid? sessionGuid, UpdateSessionRequest body = null);

        /// <summary>
        /// Update attributes, parameters or metadata of an identification session
        /// </summary>
        /// <remarks>
        /// Update parameters or metadata of an identification session
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleUpdateSessionGuidPutAsyncWithHttpInfo (Guid? sessionGuid, UpdateSessionRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SessionLifeCycleApi : ISessionLifeCycleApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionLifeCycleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionLifeCycleApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionLifeCycleApi"/> class
        /// </summary>
        /// <returns></returns>
        public SessionLifeCycleApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionLifeCycleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SessionLifeCycleApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create the identification session Permits to create the identification session for a prospect user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CreateSessionResponse</returns>
        public CreateSessionResponse ApiV1SessionLifeCycleCreatePost (CreateSessionRequest body = null)
        {
             ApiResponse<CreateSessionResponse> localVarResponse = ApiV1SessionLifeCycleCreatePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create the identification session Permits to create the identification session for a prospect user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CreateSessionResponse</returns>
        public ApiResponse< CreateSessionResponse > ApiV1SessionLifeCycleCreatePostWithHttpInfo (CreateSessionRequest body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/Create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateSessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSessionResponse)));
        }

        /// <summary>
        /// Create the identification session Permits to create the identification session for a prospect user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CreateSessionResponse</returns>
        public async System.Threading.Tasks.Task<CreateSessionResponse> ApiV1SessionLifeCycleCreatePostAsync (CreateSessionRequest body = null)
        {
             ApiResponse<CreateSessionResponse> localVarResponse = await ApiV1SessionLifeCycleCreatePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create the identification session Permits to create the identification session for a prospect user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CreateSessionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSessionResponse>> ApiV1SessionLifeCycleCreatePostAsyncWithHttpInfo (CreateSessionRequest body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/Create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateSessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSessionResponse)));
        }

        /// <summary>
        /// Delete an identification session Delete an identification session if exist
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns></returns>
        public void ApiV1SessionLifeCycleDeleteSessionGuidDelete (Guid? sessionGuid)
        {
             ApiV1SessionLifeCycleDeleteSessionGuidDeleteWithHttpInfo(sessionGuid);
        }

        /// <summary>
        /// Delete an identification session Delete an identification session if exist
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SessionLifeCycleDeleteSessionGuidDeleteWithHttpInfo (Guid? sessionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleDeleteSessionGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/Delete/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleDeleteSessionGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an identification session Delete an identification session if exist
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SessionLifeCycleDeleteSessionGuidDeleteAsync (Guid? sessionGuid)
        {
             await ApiV1SessionLifeCycleDeleteSessionGuidDeleteAsyncWithHttpInfo(sessionGuid);

        }

        /// <summary>
        /// Delete an identification session Delete an identification session if exist
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleDeleteSessionGuidDeleteAsyncWithHttpInfo (Guid? sessionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleDeleteSessionGuidDelete");

            var localVarPath = "/api/v1/SessionLifeCycle/Delete/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleDeleteSessionGuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns acquired informations of a prospect customer during the identification session Returns acquired informations of a prospect customer during the identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>GetAcquiredIDInfoResponse</returns>
        public GetAcquiredIDInfoResponse ApiV1SessionLifeCycleGetAcquiredIDInfoSessionGuidPost (Guid? sessionGuid, GetAcquiredIDInfoRequest body = null)
        {
             ApiResponse<GetAcquiredIDInfoResponse> localVarResponse = ApiV1SessionLifeCycleGetAcquiredIDInfoSessionGuidPostWithHttpInfo(sessionGuid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns acquired informations of a prospect customer during the identification session Returns acquired informations of a prospect customer during the identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetAcquiredIDInfoResponse</returns>
        public ApiResponse< GetAcquiredIDInfoResponse > ApiV1SessionLifeCycleGetAcquiredIDInfoSessionGuidPostWithHttpInfo (Guid? sessionGuid, GetAcquiredIDInfoRequest body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAcquiredIDInfoSessionGuidPost");

            var localVarPath = "/api/v1/SessionLifeCycle/GetAcquiredIDInfo/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAcquiredIDInfoSessionGuidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAcquiredIDInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAcquiredIDInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAcquiredIDInfoResponse)));
        }

        /// <summary>
        /// Returns acquired informations of a prospect customer during the identification session Returns acquired informations of a prospect customer during the identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GetAcquiredIDInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetAcquiredIDInfoResponse> ApiV1SessionLifeCycleGetAcquiredIDInfoSessionGuidPostAsync (Guid? sessionGuid, GetAcquiredIDInfoRequest body = null)
        {
             ApiResponse<GetAcquiredIDInfoResponse> localVarResponse = await ApiV1SessionLifeCycleGetAcquiredIDInfoSessionGuidPostAsyncWithHttpInfo(sessionGuid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns acquired informations of a prospect customer during the identification session Returns acquired informations of a prospect customer during the identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GetAcquiredIDInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAcquiredIDInfoResponse>> ApiV1SessionLifeCycleGetAcquiredIDInfoSessionGuidPostAsyncWithHttpInfo (Guid? sessionGuid, GetAcquiredIDInfoRequest body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAcquiredIDInfoSessionGuidPost");

            var localVarPath = "/api/v1/SessionLifeCycle/GetAcquiredIDInfo/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAcquiredIDInfoSessionGuidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAcquiredIDInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAcquiredIDInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAcquiredIDInfoResponse)));
        }

        /// <summary>
        /// Returns a list of identification sessions Returns a list of identification sessions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GetAllSessionResponse</returns>
        public GetAllSessionResponse ApiV1SessionLifeCycleGetAllPost (GetAllSessionRequest body = null)
        {
             ApiResponse<GetAllSessionResponse> localVarResponse = ApiV1SessionLifeCycleGetAllPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of identification sessions Returns a list of identification sessions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GetAllSessionResponse</returns>
        public ApiResponse< GetAllSessionResponse > ApiV1SessionLifeCycleGetAllPostWithHttpInfo (GetAllSessionRequest body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/GetAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAllPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllSessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAllSessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllSessionResponse)));
        }

        /// <summary>
        /// Returns a list of identification sessions Returns a list of identification sessions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GetAllSessionResponse</returns>
        public async System.Threading.Tasks.Task<GetAllSessionResponse> ApiV1SessionLifeCycleGetAllPostAsync (GetAllSessionRequest body = null)
        {
             ApiResponse<GetAllSessionResponse> localVarResponse = await ApiV1SessionLifeCycleGetAllPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of identification sessions Returns a list of identification sessions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GetAllSessionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllSessionResponse>> ApiV1SessionLifeCycleGetAllPostAsyncWithHttpInfo (GetAllSessionRequest body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/GetAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAllPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllSessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAllSessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllSessionResponse)));
        }

        /// <summary>
        /// Returns Audit Logs of an identification session Returns Audit Logs in pdf format
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>GetAllSessionResponse</returns>
        public GetAllSessionResponse ApiV1SessionLifeCycleGetAuditLogSessionGuidGet (Guid? sessionGuid)
        {
             ApiResponse<GetAllSessionResponse> localVarResponse = ApiV1SessionLifeCycleGetAuditLogSessionGuidGetWithHttpInfo(sessionGuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Audit Logs of an identification session Returns Audit Logs in pdf format
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>ApiResponse of GetAllSessionResponse</returns>
        public ApiResponse< GetAllSessionResponse > ApiV1SessionLifeCycleGetAuditLogSessionGuidGetWithHttpInfo (Guid? sessionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAuditLogSessionGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/GetAuditLog/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAuditLogSessionGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllSessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAllSessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllSessionResponse)));
        }

        /// <summary>
        /// Returns Audit Logs of an identification session Returns Audit Logs in pdf format
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of GetAllSessionResponse</returns>
        public async System.Threading.Tasks.Task<GetAllSessionResponse> ApiV1SessionLifeCycleGetAuditLogSessionGuidGetAsync (Guid? sessionGuid)
        {
             ApiResponse<GetAllSessionResponse> localVarResponse = await ApiV1SessionLifeCycleGetAuditLogSessionGuidGetAsyncWithHttpInfo(sessionGuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns Audit Logs of an identification session Returns Audit Logs in pdf format
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of ApiResponse (GetAllSessionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllSessionResponse>> ApiV1SessionLifeCycleGetAuditLogSessionGuidGetAsyncWithHttpInfo (Guid? sessionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetAuditLogSessionGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/GetAuditLog/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetAuditLogSessionGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllSessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAllSessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllSessionResponse)));
        }

        /// <summary>
        /// Returns info of an identification sessione Returns the identification session&#x27;s metadata/parameters/attributes risk score associated if the flow is completed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>GetSessionResponse</returns>
        public GetSessionResponse ApiV1SessionLifeCycleGetSessionGuidGet (Guid? sessionGuid)
        {
             ApiResponse<GetSessionResponse> localVarResponse = ApiV1SessionLifeCycleGetSessionGuidGetWithHttpInfo(sessionGuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns info of an identification sessione Returns the identification session&#x27;s metadata/parameters/attributes risk score associated if the flow is completed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>ApiResponse of GetSessionResponse</returns>
        public ApiResponse< GetSessionResponse > ApiV1SessionLifeCycleGetSessionGuidGetWithHttpInfo (Guid? sessionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetSessionGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/Get/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetSessionGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSessionResponse)));
        }

        /// <summary>
        /// Returns info of an identification sessione Returns the identification session&#x27;s metadata/parameters/attributes risk score associated if the flow is completed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of GetSessionResponse</returns>
        public async System.Threading.Tasks.Task<GetSessionResponse> ApiV1SessionLifeCycleGetSessionGuidGetAsync (Guid? sessionGuid)
        {
             ApiResponse<GetSessionResponse> localVarResponse = await ApiV1SessionLifeCycleGetSessionGuidGetAsyncWithHttpInfo(sessionGuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns info of an identification sessione Returns the identification session&#x27;s metadata/parameters/attributes risk score associated if the flow is completed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <returns>Task of ApiResponse (GetSessionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSessionResponse>> ApiV1SessionLifeCycleGetSessionGuidGetAsyncWithHttpInfo (Guid? sessionGuid)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleGetSessionGuidGet");

            var localVarPath = "/api/v1/SessionLifeCycle/Get/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetSessionGuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSessionResponse)));
        }

        /// <summary>
        /// Returns status of a list of identification session Returns status and risk score of a identification session base on the flow types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;GetStatusSessionResponse&gt;</returns>
        public List<GetStatusSessionResponse> ApiV1SessionLifeCycleGetStatusPost (List<Guid?> body = null)
        {
             ApiResponse<List<GetStatusSessionResponse>> localVarResponse = ApiV1SessionLifeCycleGetStatusPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns status of a list of identification session Returns status and risk score of a identification session base on the flow types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;GetStatusSessionResponse&gt;</returns>
        public ApiResponse< List<GetStatusSessionResponse> > ApiV1SessionLifeCycleGetStatusPostWithHttpInfo (List<Guid?> body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/GetStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetStatusPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetStatusSessionResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetStatusSessionResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetStatusSessionResponse>)));
        }

        /// <summary>
        /// Returns status of a list of identification session Returns status and risk score of a identification session base on the flow types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;GetStatusSessionResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetStatusSessionResponse>> ApiV1SessionLifeCycleGetStatusPostAsync (List<Guid?> body = null)
        {
             ApiResponse<List<GetStatusSessionResponse>> localVarResponse = await ApiV1SessionLifeCycleGetStatusPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns status of a list of identification session Returns status and risk score of a identification session base on the flow types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetStatusSessionResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetStatusSessionResponse>>> ApiV1SessionLifeCycleGetStatusPostAsyncWithHttpInfo (List<Guid?> body = null)
        {

            var localVarPath = "/api/v1/SessionLifeCycle/GetStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleGetStatusPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetStatusSessionResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetStatusSessionResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetStatusSessionResponse>)));
        }

        /// <summary>
        /// Send an email with the link to activate the identification session Send an email with the link to activate the identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="templateId"> (optional)</param>
        /// <returns></returns>
        public void ApiV1SessionLifeCycleSendEmailSessionGuidPost (Guid? sessionGuid, string templateId = null)
        {
             ApiV1SessionLifeCycleSendEmailSessionGuidPostWithHttpInfo(sessionGuid, templateId);
        }

        /// <summary>
        /// Send an email with the link to activate the identification session Send an email with the link to activate the identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="templateId"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SessionLifeCycleSendEmailSessionGuidPostWithHttpInfo (Guid? sessionGuid, string templateId = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleSendEmailSessionGuidPost");

            var localVarPath = "/api/v1/SessionLifeCycle/SendEmail/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleSendEmailSessionGuidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Send an email with the link to activate the identification session Send an email with the link to activate the identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="templateId"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SessionLifeCycleSendEmailSessionGuidPostAsync (Guid? sessionGuid, string templateId = null)
        {
             await ApiV1SessionLifeCycleSendEmailSessionGuidPostAsyncWithHttpInfo(sessionGuid, templateId);

        }

        /// <summary>
        /// Send an email with the link to activate the identification session Send an email with the link to activate the identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="templateId"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleSendEmailSessionGuidPostAsyncWithHttpInfo (Guid? sessionGuid, string templateId = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleSendEmailSessionGuidPost");

            var localVarPath = "/api/v1/SessionLifeCycle/SendEmail/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleSendEmailSessionGuidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update attributes, parameters or metadata of an identification session Update parameters or metadata of an identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ApiV1SessionLifeCycleUpdateSessionGuidPut (Guid? sessionGuid, UpdateSessionRequest body = null)
        {
             ApiV1SessionLifeCycleUpdateSessionGuidPutWithHttpInfo(sessionGuid, body);
        }

        /// <summary>
        /// Update attributes, parameters or metadata of an identification session Update parameters or metadata of an identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1SessionLifeCycleUpdateSessionGuidPutWithHttpInfo (Guid? sessionGuid, UpdateSessionRequest body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleUpdateSessionGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/Update/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleUpdateSessionGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update attributes, parameters or metadata of an identification session Update parameters or metadata of an identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1SessionLifeCycleUpdateSessionGuidPutAsync (Guid? sessionGuid, UpdateSessionRequest body = null)
        {
             await ApiV1SessionLifeCycleUpdateSessionGuidPutAsyncWithHttpInfo(sessionGuid, body);

        }

        /// <summary>
        /// Update attributes, parameters or metadata of an identification session Update parameters or metadata of an identification session
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionGuid"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1SessionLifeCycleUpdateSessionGuidPutAsyncWithHttpInfo (Guid? sessionGuid, UpdateSessionRequest body = null)
        {
            // verify the required parameter 'sessionGuid' is set
            if (sessionGuid == null)
                throw new ApiException(400, "Missing required parameter 'sessionGuid' when calling SessionLifeCycleApi->ApiV1SessionLifeCycleUpdateSessionGuidPut");

            var localVarPath = "/api/v1/SessionLifeCycle/Update/{sessionGuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionGuid != null) localVarPathParams.Add("sessionGuid", this.Configuration.ApiClient.ParameterToString(sessionGuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1SessionLifeCycleUpdateSessionGuidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
